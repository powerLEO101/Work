/**************************
  * Author : Leo101
  * Problem : 
  * Tags : 
**************************/
#include <iostream>
#include <cstdio>
#include <cstring>
#include <algorithm>
#define gi get_int()
#define _FILE(s) freopen(#s".in", "r", stdin); freopen(#s".out", "w", stdout)
#define INF 0x3f3f3f3f
const int LIMIT = 2e6;
int get_int()
{
	int x = 0, y = 1; char ch = getchar();
	while (!isdigit(ch) && ch != '-')
		ch = getchar();
	if (ch == '-') y = -1, ch = getchar();
	while (isdigit(ch)) {
		x = x * 10 + ch - '0';
		ch = getchar();
	}
	return x * y;
}

int kun[LIMIT + 1];

class Interval
{
public:
	int l, r, cost;
} num[LIMIT + 1];
int operator< (const Interval& a, const Interval& b)
{
	return a.cost < b.cost;
}
int cmp(const Interval& a, const Interval& b)
{
	return a.r < b.r;
}
int binarySearch(int val, int n)
{
	int l = 0, r = n, ans = -1;
	while (l <= r) {
		int mid = (l + r) / 2;
		if (kun[mid] <= val) {
			l = mid + 1;
			ans = mid;
		} else {
			r = mid - 1;
		}
	}
	return ans;
}

Interval heap[LIMIT + 1];
int cnt = 0;
void insertHeap(Interval a)
{
	heap[cnt++] = a;
	std :: push_heap(heap, heap + cnt);
}
Interval deleteHeap()
{
	std :: pop_heap(heap, heap + cnt);
	return heap[--cnt];
}

class Value
{
public:
	int index;
	Interval value;
};
bool operator< (const Value& a, const Value& b)
{
	return a.value < b.value;
}

class Node
{
public:
	Value val;
	Node* lSon,* rSon;
Node() {
	val = (Value) {-1, -1};
	lSon = rSon = NULL;
}
} Root;
void buildTree(Node* root = root, int l = 0, int r = LIMIT)
{
	if (l == r - 1) {
		root -> val = (Value) {l, num[belong[l]]};
		return ;
	}
	root = new Node;
	int mid = (l + r) / 2;
	buildTree(root -> lSon, l, mid);
	buildTree(root -> rSon, mid, r);
	root -> val = std :: max(root -> lSon -> val, root -> rSon -> val);
}
void modifyTree(int index, Interval val, Node* root = root, int l = 0, int r = LIMIT)
{
	if (l > index || r <= index) return ;
	if (l == r - 1) {
		root -> val = val;
		return ;
	}
	int mid = (l + r) / 2;
	modifyTree(index, val, root -> lSon, l, mid);
	modifyTree(index, val, root -> rSon, mid, r);
	root -> val = std :: max(root -> lSon -> val, root -> rSon -> val);
}
Value queryTree(int qL, int qR, Node* root = root, int l = 0, int r = LIMIT)
{
	if (qR <= l || r <= qL) return (Interval) {-1, -1, -INF};
	int mid = (l + r) / 2;
	Value resultL = queryTree(qL, qR, root -> lSon, l, mid);
	Value resultR = queryTree(qL, qR, root -> rSon, mid, r);
	return std :: max(resultL, resultR);
}

int main()
{
	_FILE(kun);

	int n = gi, m = gi;
	for (int i = 0; i < n; i++) kun[i] = gi;
	kun[n] = INF; //!!!
	std :: sort(kun, kun + n);
	for (int i = 0; i < m; i++) {
		int d = gi, c = gi;
		num[i].l = 0;
		num[i].r = binarySearch(d, n) + 1;
		num[i].cost = c;
	}

	std :: sort(num, num + m, cmp);

	int index = 0;
	for (int i = 0; i < m; i++) {
		if (num[i].r <= index) {
			insertHeap(num[i]);
			continue;
		}
		belong[index] = i;
		index++;
	}

	buildTree();

	return 0;
}
